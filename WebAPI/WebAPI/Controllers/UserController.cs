#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAPI.Context;
using WebAPI.Models;

using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

using BCryptNet = BCrypt.Net.BCrypt;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly DatabaseContext _context;
        private readonly IConfiguration configuration;

        public UserController(DatabaseContext context, IConfiguration iConfig)
        {
            _context = context;
            configuration = iConfig;
        }

        /// <summary>
        /// Takes a user object from the webservice.
        /// Returns an error if username or password is incorrect.
        /// Otherwise, returns a JWT Token.
        /// </summary>
        /// <param name="loginUser"></param>
        /// <returns></returns>
        // POST: api/User/Login
        [HttpPost("Login")]
        public async Task<ActionResult<User>> LoginUser(User loginUser)
        {
            //var user = await _context.Users.FirstOrDefaultAsync(u => u.Username == loginUser.Username);
            var user = (await _context.Users.Where(u => u.username == loginUser.username).ToListAsync()).FirstOrDefault(u => u.username == loginUser.username); //Case sensitivity hack

            if ((user == null) || (!BCryptNet.Verify(loginUser.password, user.password)))
            {
                return NotFound("User info not correct");
            }

            string key = configuration.GetValue<string>("Jwt:Key"); //Secret key which will be used later during validation
            string issuer = configuration.GetValue<string>("Jwt:Issuer");
            string audience = configuration.GetValue<string>("Jwt:Audience");

            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            //List of claims for token to include. For this system, only userId in necessary.
            var permClaims = new List<Claim>();
            permClaims.Add(new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()));
            permClaims.Add(new Claim("userId", user.userId.ToString()));

            //Create JSON Web Token.
            var token = new JwtSecurityToken(issuer,
                            audience,
                            permClaims,
                            expires: DateTime.Now.AddDays(31), //A token generated by this system will last 31 days.
                            signingCredentials: credentials);
            var jwt_token = new JwtSecurityTokenHandler().WriteToken(token);

            return Ok(jwt_token);
        }

        /// <summary>
        /// Takes a user object from the webservice.
        /// Returns an error if username already exists.
        /// Otherwise, adds user to database and returns Status Code 201.
        /// </summary>
        /// <param name="registerUser"></param>
        /// <returns></returns>
        // POST: api/User/Register
        [HttpPost("Register")]
        public async Task<ActionResult<User>> RegisterUser(User registerUser)
        {
            //var user = await _context.Users.FirstOrDefaultAsync(u => u.username == registerUser.username);
            var user = (await _context.Users.Where(u => u.username == registerUser.username).ToListAsync()).FirstOrDefault(u => u.username == registerUser.username); //Case sensitivity hack

            if (user != null)
            {
                return Conflict("Username already registered");
            }

            registerUser.password = BCryptNet.HashPassword(registerUser.password, BCryptNet.GenerateSalt());

            _context.Users.Add(registerUser);
            await _context.SaveChangesAsync();

            return StatusCode(201);
        }

        private bool UserExists(int id)
        {
            return _context.Users.Any(e => e.userId == id);
        }
    }
}
